spark.executor.memory = 8g
spark.sql.catalog.dev.uri = http://localhost:9001/iceberg/
spark.master = local[*]
spark.sql.catalog.dev = org.apache.iceberg.spark.SparkCatalog
spark.executor.cores = 1
spark.sql.catalog.dev.type = rest
spark.sql.extensions = org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions


sqlQuery="SELECT * from dev.default.DAILYMARKET_TXT"

# Other sample sql queries
#sqlQuery="WITH year_total AS (SELECT c_customer_id customer_id, c_first_name customer_first_name, c_last_name customer_last_name, d_year AS year1, Sum(ss_net_paid) year_total, 's' sale_type FROM dev.default.CUSTOMER, dev.default.STORE_SALES, dev.default.DATE_DIM WHERE c_customer_sk = ss_customer_sk AND ss_sold_date_sk = d_date_sk AND d_year IN ( 1999, 1999 + 1 ) GROUP BY c_customer_id, c_first_name, c_last_name, d_year UNION ALL SELECT c_customer_id customer_id, c_first_name customer_first_name, c_last_name customer_last_name, d_year AS year1, Sum(ws_net_paid) year_total, 'w' sale_type FROM dev.default.CUSTOMER, dev.default.WEB_SALES, dev.default.DATE_DIM WHERE c_customer_sk = ws_bill_customer_sk AND ws_sold_date_sk = d_date_sk AND d_year IN ( 1999, 1999 + 1 ) GROUP BY c_customer_id, c_first_name, c_last_name, d_year) SELECT t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name FROM year_total t_s_firstyear, year_total t_s_secyear, year_total t_w_firstyear, year_total t_w_secyear WHERE t_s_secyear.customer_id = t_s_firstyear.customer_id AND t_s_firstyear.customer_id = t_w_secyear.customer_id AND t_s_firstyear.customer_id = t_w_firstyear.customer_id AND t_s_firstyear.sale_type = 's' AND t_w_firstyear.sale_type = 'w' AND t_s_secyear.sale_type = 's' AND t_w_secyear.sale_type = 'w' AND t_s_firstyear.year1 = 1999 AND t_s_secyear.year1 = 1999 + 1 AND t_w_firstyear.year1 = 1999 AND t_w_secyear.year1 = 1999 + 1 AND t_s_firstyear.year_total > 0 AND t_w_firstyear.year_total > 0 AND CASE WHEN t_w_firstyear.year_total > 0 THEN t_w_secyear.year_total/t_w_firstyear.year_total ELSE NULL END > CASE WHEN t_s_firstyear.year_total > 0 THEN t_s_secyear.year_total / t_s_firstyear.year_total ELSE NULL END ORDER BY 1, 2, 3"
#sqlQuery= "select * from dev.default.CUSTOMER where C_BIRTH_COUNTRY='CHRISTMAS ISLAND'"
#sqlQuery="SELECT cp.cp_catalog_page_id,SUM(cr.cr_return_quantity) AS total_return_quantity,SUM(cs.cs_quantity) AS total_sales_quantity,(SUM(cr.cr_return_quantity) / NULLIF(SUM(cs.cs_quantity), 0)) AS return_rate FROM dev.default.CATALOG_PAGE cp LEFT JOIN dev.default.CATALOG_SALES cs ON cp.cp_catalog_page_sk = cs.cs_catalog_page_sk LEFT JOIN dev.default.CATALOG_RETURNS cr ON cp.cp_catalog_page_sk = cr.cr_catalog_page_sk GROUP BY cp.cp_catalog_page_id HAVING total_sales_quantity > 0 ORDER BY return_rate DESC"
#sqlQuery="SELECT cp.cp_catalog_page_id, SUM(cs.cs_sales_price) AS total_sales_price FROM dev.default.CATALOG_PAGE cp JOIN dev.default.CATALOG_SALES cs ON cp.cp_catalog_page_sk = cs.cs_catalog_page_sk GROUP BY cp.cp_catalog_page_id ORDER BY total_sales_price DESC"
#sqlQuery="SELECT cp.cp_catalog_page_id,  SUM(cr.cr_return_amount) AS total_return_amount FROM dev.default.CATALOG_RETURNS cr JOIN dev.default.CATALOG_PAGE cp ON cr.cr_catalog_page_sk = cp.cp_catalog_page_sk GROUP BY cp.cp_catalog_page_id ORDER BY total_return_amount DESC"
#sqlQuery="SELECT Substr(w_warehouse_name, 1, 20), sm_type, cc_name, Sum(CASE WHEN (cs_ship_date_sk - cs_sold_date_sk <= 30) THEN 1 ELSE 0 END) AS \`30 days\`, Sum(CASE WHEN (cs_ship_date_sk - cs_sold_date_sk > 30) AND (cs_ship_date_sk - cs_sold_date_sk <= 60) THEN 1 ELSE 0 END) AS \`31-60 days\`, Sum(CASE WHEN (cs_ship_date_sk - cs_sold_date_sk > 60) AND (cs_ship_date_sk - cs_sold_date_sk <= 90) THEN 1 ELSE 0 END) AS \`61-90 days\`, Sum(CASE WHEN (cs_ship_date_sk - cs_sold_date_sk > 90) AND (cs_ship_date_sk - cs_sold_date_sk <= 120) THEN 1 ELSE 0 END) AS \`91-120 days\`, Sum(CASE WHEN (cs_ship_date_sk - cs_sold_date_sk > 120) THEN 1 ELSE 0 END) AS \`>120 days\` FROM dev.default.CATALOG_SALES, dev.default.WAREHOUSE, dev.default.SHIP_MODE, dev.default.CALL_CENTER, dev.default.DATE_DIM WHERE d_month_seq BETWEEN 1200 AND 1200 + 11 AND cs_ship_date_sk = d_date_sk AND cs_warehouse_sk = w_warehouse_sk AND cs_ship_mode_sk = sm_ship_mode_sk AND cs_call_center_sk = cc_call_center_sk GROUP BY Substr(w_warehouse_name, 1, 20), sm_type, cc_name ORDER BY Substr(w_warehouse_name, 1, 20), sm_type, cc_name"
#sqlQuery="WITH year_total AS (SELECT c_customer_id customer_id, c_first_name customer_first_name, c_last_name customer_last_name, d_year AS year1, Sum(ss_net_paid) year_total, 's' sale_type FROM dev.default.CUSTOMER, dev.default.STORE_SALES, dev.default.DATE_DIM WHERE c_customer_sk = ss_customer_sk AND ss_sold_date_sk = d_date_sk AND d_year IN ( 1999, 1999 + 1 ) GROUP BY c_customer_id, c_first_name, c_last_name, d_year UNION ALL SELECT c_customer_id customer_id, c_first_name customer_first_name, c_last_name customer_last_name, d_year AS year1, Sum(ws_net_paid) year_total, 'w' sale_type FROM dev.default.CUSTOMER, dev.default.WEB_SALES, dev.default.DATE_DIM WHERE c_customer_sk = ws_bill_customer_sk AND ws_sold_date_sk = d_date_sk AND d_year IN ( 1999, 1999 + 1 ) GROUP BY c_customer_id, c_first_name, c_last_name, d_year) SELECT t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name FROM year_total t_s_firstyear, year_total t_s_secyear, year_total t_w_firstyear, year_total t_w_secyear WHERE t_s_secyear.customer_id = t_s_firstyear.customer_id AND t_s_firstyear.customer_id = t_w_secyear.customer_id AND t_s_firstyear.customer_id = t_w_firstyear.customer_id AND t_s_firstyear.sale_type = 's' AND t_w_firstyear.sale_type = 'w' AND t_s_secyear.sale_type = 's' AND t_w_secyear.sale_type = 'w' AND t_s_firstyear.year1 = 1999 AND t_s_secyear.year1 = 1999 + 1 AND t_w_firstyear.year1 = 1999 AND t_w_secyear.year1 = 1999 + 1 AND t_s_firstyear.year_total > 0 AND t_w_firstyear.year_total > 0 AND CASE WHEN t_w_firstyear.year_total > 0 THEN t_w_secyear.year_total/t_w_firstyear.year_total ELSE NULL END > CASE WHEN t_s_firstyear.year_total > 0 THEN t_s_secyear.year_total / t_s_firstyear.year_total ELSE NULL END ORDER BY 1, 2, 3"
#sqlQuery="SELECT i_product_name, i_brand, i_class, i_category, Avg(inv_quantity_on_hand) qoh FROM dev.default.INVENTORY, dev.default.DATE_DIM, dev.default.ITEM, dev.default.WAREHOUSE WHERE inv_date_sk = d_date_sk AND inv_item_sk = i_item_sk AND inv_warehouse_sk = w_warehouse_sk AND d_month_seq BETWEEN 1205 AND 1205 + 11 GROUP BY rollup( i_product_name, i_brand, i_class, i_category ) ORDER BY qoh, i_product_name, i_brand, i_class, i_category"
#sqlQuery="WITH year_total AS (SELECT c_customer_id customer_id, c_first_name customer_first_name,c_last_name customer_last_name, c_preferred_cust_flag customer_preferred_cust_flag, c_birth_country customer_birth_country, c_login customer_login, c_email_address customer_email_address, d_year dyear, Sum(ss_ext_list_price - ss_ext_discount_amt) year_total, 's' sale_type FROM dev.default.CUSTOMER, dev.default.STORE_SALES, dev.default.DATE_DIM WHERE c_customer_sk = ss_customer_sk AND ss_sold_date_sk = d_date_sk GROUP BY c_customer_id,c_first_name,c_last_name,c_preferred_cust_flag,c_birth_country,c_login,c_email_address,d_year UNION ALL SELECT c_customer_id customer_id,c_first_name customer_first_name,c_last_name customer_last_name,c_preferred_cust_flag customer_preferred_cust_flag,c_birth_country customer_birth_country,c_login customer_login,c_email_address customer_email_address, d_year dyear, Sum(ws_ext_list_price - ws_ext_discount_amt) year_total, 'w' sale_type FROM dev.default.CUSTOMER,dev.default.WEB_SALES,dev.default.DATE_DIM WHERE c_customer_sk = ws_bill_customer_sk AND ws_sold_date_sk = d_date_sk GROUP BY c_customer_id,c_first_name,c_last_name,c_preferred_cust_flag,c_birth_country,c_login,c_email_address,d_year) SELECT t_s_secyear.customer_id,t_s_secyear.customer_first_name,t_s_secyear.customer_last_name,t_s_secyear.customer_birth_country FROM year_total t_s_firstyear,year_total t_s_secyear,year_total t_w_firstyear,year_total t_w_secyear WHERE  t_s_secyear.customer_id = t_s_firstyear.customer_id AND t_s_firstyear.customer_id = t_w_secyear.customer_id AND t_s_firstyear.customer_id = t_w_firstyear.customer_id AND t_s_firstyear.sale_type = 's' AND t_w_firstyear.sale_type = 'w' AND t_s_secyear.sale_type = 's' AND t_w_secyear.sale_type = 'w' AND t_s_firstyear.dyear = 2001 AND t_s_secyear.dyear = 2001 + 1 AND t_w_firstyear.dyear = 2001 AND t_w_secyear.dyear = 2001 + 1 AND t_s_firstyear.year_total > 0 AND t_w_firstyear.year_total > 0 AND CASE WHEN t_w_firstyear.year_total > 0 THEN t_w_secyear.year_total / t_w_firstyear.year_total ELSE 0.0 END > CASE WHEN t_s_firstyear.year_total > 0 THEN t_s_secyear.year_total / t_s_firstyear.year_total ELSE 0.0 END ORDER BY t_s_secyear.customer_id,t_s_secyear.customer_first_name,t_s_secyear.customer_last_name,t_s_secyear.customer_birth_country"
#sqlQuery="WITH ss AS (SELECT s_store_sk,Sum(ss_ext_sales_price) AS sales,Sum(ss_net_profit) AS profit FROM dev.default.STORE_SALES, dev.default.DATE_DIM, dev.default.STORE WHERE ss_sold_date_sk = d_date_sk AND d_date BETWEEN Cast('2001-08-16' AS DATE) AND ( Cast('2001-08-16' AS DATE) + INTERVAL '30' day) AND ss_store_sk = s_store_sk GROUP BY s_store_sk) , sr AS (SELECT s_store_sk,sum(sr_return_amt) AS returns1,sum(sr_net_loss) AS profit_loss FROM dev.default.STORE_RETURNS, dev.default.DATE_DIM, dev.default.STORE WHERE sr_return_date_sk = d_date_sk AND d_date BETWEEN cast('2001-08-16' AS date) AND (cast('2001-08-16' AS date) + INTERVAL '30' day)AND sr_store_sk = s_store_sk GROUP BY s_store_sk), cs AS ( SELECT cs_call_center_sk, sum(cs_ext_sales_price) AS sales, sum(cs_net_profit) AS profit FROM dev.default.CATALOG_SALES, dev.default.DATE_DIM WHERE cs_sold_date_sk = d_date_sk AND d_date BETWEEN cast('2001-08-16' AS date) AND (cast('2001-08-16' AS date) + INTERVAL '30' day) GROUP BY cs_call_center_sk ), cr AS ( SELECT cr_call_center_sk, sum(cr_return_amount) AS returns1, sum(cr_net_loss) AS profit_loss FROM dev.default.CATALOG_RETURNS, dev.default.DATE_DIM WHERE cr_returned_date_sk = d_date_sk AND d_date BETWEEN cast('2001-08-16' AS date) AND (cast('2001-08-16' AS date) + INTERVAL '30' day) GROUP BY cr_call_center_sk ), ws AS (SELECT wp_web_page_sk, sum(ws_ext_sales_price) AS sales, sum(ws_net_profit) AS profit FROM dev.default.WEB_SALES, dev.default.DATE_DIM, dev.default.WEB_PAGE WHERE ws_sold_date_sk = d_date_sk AND d_date BETWEEN cast('2001-08-16' AS date) AND (cast('2001-08-16' AS date) + INTERVAL '30' day) AND ws_web_page_sk = wp_web_page_sk GROUP BY wp_web_page_sk), wr AS (SELECT wp_web_page_sk,sum(wr_return_amt) AS returns1,sum(wr_net_loss) AS profit_loss FROM dev.default.WEB_RETURNS, dev.default.DATE_DIM, dev.default.WEB_PAGE WHERE wr_returned_date_sk = d_date_sk AND d_date BETWEEN cast('2001-08-16' AS date) AND (cast('2001-08-16' AS date) + INTERVAL '30' day) AND wr_web_page_sk = wp_web_page_sk GROUP BY wp_web_page_sk) SELECT channel, id, sum(sales) AS sales, sum(returns1) AS returns1, sum(profit) AS profit FROM (SELECT 'store channel' AS channel, ss.s_store_sk AS id, sales, COALESCE(returns1, 0) AS returns1, (profit - COALESCE(profit_loss,0)) AS profit FROM ss LEFT JOIN sr ON ss.s_store_sk = sr.s_store_sk UNION ALL SELECT 'catalog channel' AS channel, cs_call_center_sk AS id, sales, returns1, (profit - profit_loss) AS profit FROM cs, cr UNION ALL SELECT 'web channel' AS channel, ws.wp_web_page_sk AS id, sales, COALESCE(returns1, 0) returns1, (profit - COALESCE(profit_loss,0)) AS profit FROM ws LEFT JOIN wr ON ws.wp_web_page_sk = wr.wp_web_page_sk ) x GROUP BY rollup (channel, id) ORDER BY channel, id"


# Log output level (INFO|DEBUG|ERROR)
logOutput=INFO

# Number of rows to fetch for the above specified query
fetchRows=100

# Explain mode for query plan of dataframe. Supported explainMode values (true | false | simple | codegen | extended | cost | formatted)
explainMode=formatted